// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// Instruction decoding, if instruction[15]=0, then control bit all set to 0
	Mux16(a=false, b=instruction, sel=instruction[15], out[3]=writeM, out[0]=ins0, out[1]=ins1, out[2]=ins2, out[3]=ins3, out[4]=ins4, out[5]=ins5, out[6]=ins6, out[7]=ins7, out[8]=ins8, out[9]=ins9, out[10]=ins10, out[11]=ins11, out[12]=ins12);

	// Mux16 select from input address or ALU output for A Register
	Not(in=instruction[15], out=seladdr);
	Mux16(a=ALUout, b=instruction, sel=seladdr, out=forAregi);

	// if instruction[15] is zero or ins5 is true, load input to A register
	Or(a=seladdr, b=ins5, out=loadregiA);

	// A register
	ARegister(in=forAregi, load=loadregiA, out=Aout, out[0..14]=addressM);

	// Select A or M as input
	Mux16(a=Aout, b=inM, sel=ins12, out=outAorM);
	
	// D register
	DRegister(in=ALUout, load=ins4, out=Dout);

	// ALU
	ALU(x=Dout, y=outAorM, zx=ins11, nx=ins10, zy=ins9, ny=ins8, f=ins7, no=ins6, out=outM, out=ALUout, zr=zr, ng=ng);

	// ins jump bits for load of PC
	// jump negative
	Xor(a=ins2, b=false, out=negjumpxor);
	Xor(a=ng, b=false, out=ngxor);
	And(a=negjumpxor, b=ngxor, out=jumpneg);
	// jump zero
	Xor(a=ins1, b=false, out=zerojumpxor);
	Xor(a=zr, b=false, out=zrxor);
	And(a=zerojumpxor, b=zrxor, out=jumpzero);
	// jump positive
	Xor(a=ins0, b=false, out=posjumpxor);
	Or(a=zr, b=ng, out=zrorng);
	Xor(a=zrorng, b=true, out=zrorngxor);
	And(a=posjumpxor, b=zrorngxor, out=jumppos);

	// Jump negative or zero or positive
	Or(a=jumpneg, b=jumpzero, out=jumpnegorzero);
	Or(a=jumpnegorzero, b=jumppos, out=jump);

	// PC
	PC(in=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
