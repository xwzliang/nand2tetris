// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength > 0) {	// Initialize array only when maxLength > 0
			let str = Array.new(maxLength);
		}
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (length > 0) {	// So the Array str has been initialized
			do Memory.deAlloc(str);
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let str[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int value, digit;
		var int i;
		let value = 0;
		let digit = 0;
		if (str[0] = 45) {		// 45 is the ASCII code for negative sign '-', so the value is negative, start with second position to calculate value
			let i = 1;
		} else {
			let i = 0;
		}
		while (i < length) {
			let digit = str[i] - 48;	// 48 is the ASCII code of zero
			let value = value * 10 + digit;
			let i = i + 1;
		}
		if (str[0] = 45) {
			return -value;
		} else {
			return value;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	// Every time setInt is called from outside, the string should be reset
	let length = 0;
	if (val < 0) {
		let str[0] = 45;	// 45 is the ASCII code for negative sign '-'
		let length = length + 1;
		let val = -val;
	}
	do setInt_positive(val);
	return;
}

	method void setInt_positive(int val) {
		var int last_digit;
		var int divide_ten_result;
		var int c;
		if (val < 10) {
			let c = val + 48;
			let str[length] = c;
			let length = length + 1;
		} else {
			let divide_ten_result = val / 10;
			let last_digit = val - (divide_ten_result * 10);		// val % 10
			let c = last_digit + 48;
			do setInt_positive(divide_ten_result);
			let str[length] = c;
			let length = length + 1;
		}
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
