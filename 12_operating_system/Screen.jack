// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static int SCREEN_BASE;		// Holds the value of base memory address allocated for screen
	static boolean color;
	static Array twoToThe;	// Stores the value of two to the j for j in 0..15, used by bit function to get the j-th bit of an integer

    /** Initializes the Screen. */
    function void init() {
		let SCREEN_BASE = 16384;
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = twoToThe[14] + twoToThe[14];	
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		while (i < 8192) {		// Since Hack is 16 bit machine, there are 8192 memory words in total, 512 / 16 * 256
			do Memory.poke(SCREEN_BASE + i, 0);
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int memory_location, memory_word_value;
		let memory_location = SCREEN_BASE + (x / 16) + (y * 32);
		let memory_word_value =  Memory.peek(memory_location);
		// Drawing a single pixel requires changing a single bit in the accessed word, so we need use bit-wise operations
		if (color) {
			let memory_word_value = memory_word_value | twoToThe[x-(x/16*16)];
		} else {
			let memory_word_value = memory_word_value & ~twoToThe[15-(x-(x/16*16))];
		}
		do Memory.poke(memory_location, memory_word_value);
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		if (y1 = y2) {
			do Screen.drawLine_horizontal(x1, x2, y1);
		} else {
			if (x1 = x2) {
				do Screen.drawLine_vertical(x1, y1, y2);
			} else {
				do Screen.drawLine_general(x1, y1, x2, y2);
			}
		}
		return;
    }

    function void drawLine_horizontal(int x1, int x2, int y2) {
		var int temp;
		var int i;
		if (x1 > x2) {	// Make sure x1 < x2
			let temp = x2;
			let x2 = x1;
			let x1 = temp;
		}
		let i = 0;
		return;
    }

    function void drawLine_vertical(int x1, int y1, int y2) {
		var int temp;
		var int i;
		if (y1 > y2) {	// Make sure y1 < y2
			let temp = y2;
			let y2 = y1;
			let y1 = temp;
		}
		let i = 0;
		while (y1 + i < (y2 + 1)) {
			do Screen.drawPixel(x1, y1 + i);
			let i = i + 1;
		}
		return;
    }

    function void drawLine_general(int x1, int y1, int x2, int y2) {
		var int dx, dy;
		var int a, b;
		var int a_mul_dy_minus_b_mul_dx;
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		let a = 0;
		let b = 0;
		let a_mul_dy_minus_b_mul_dx = 0;
		while ((~(a>dx)) & (~(b>dy))) {
			if (x1 < x2) {
				if (y1 < y2) {
					do Screen.drawPixel(x1+a, y1+b);
				} else {
					do Screen.drawPixel(x1+a, y1-b);
				}
			} else {
				if (y1 < y2) {
					do Screen.drawPixel(x1-a, y1+b);
				} else {
					do Screen.drawPixel(x1-a, y1-b);
				}
			}
			if (a_mul_dy_minus_b_mul_dx < 0) {
				let a = a + 1;
				let a_mul_dy_minus_b_mul_dx = a_mul_dy_minus_b_mul_dx + dy;
			} else {
				let b = b + 1;
				let a_mul_dy_minus_b_mul_dx = a_mul_dy_minus_b_mul_dx - dx;
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		return;
    }
}
